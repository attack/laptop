#!/usr/bin/env bash

# Ask for the administrator password upfront
sudo -v

# Welcome to the laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

fancy_echo() {
  printf "\n%b\n" "$1"
}

less_fancy_echo() {
  printf "%b\n" "$1"
}

function pause(){
  read -p "$*"
}

DULL=0
BRIGHT=1
FG_RED=31
FG_GREEN=32
FG_YELLOW=33
FG_WHITE=37
BG_NULL=00

##
# ANSI Escape Commands
##
ESC="\033"
RESET="$ESC[${DULL};${FG_WHITE};${BG_NULL}m"
GREEN="$ESC[${DULL};${FG_GREEN}m"
YELLOW="$ESC[${DULL};${FG_YELLOW}m"
BRIGHT_RED="$ESC[${BRIGHT};${FG_RED}m"

fancy_echo "Initialize SSH ..."
  if [ ! -d ~/.ssh/ ]; then
    ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
  fi

start_if_needed() {
  local grep_name="[${1:0:1}]${1:1}"

  if [[ -z $(ps aux | grep -e "${grep_name}") ]]; then
    if [ -e ~/Applications/$1.app ]; then
      open ~/Applications/$1.app
    else
      if [ -e /Applications/$1.app ]; then
        open /Applications/$1.app
      fi
    fi
  fi

  true
}

fancy_echo "Setting OSX settings ..."
  # Disable press-and-hold for keys in favour of key repeat.
  defaults write -g ApplePressAndHoldEnabled -bool false

  # Set a really fast key repeat.
  defaults write NSGlobalDomain KeyRepeat -int 1

  # Disable auto-correct
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

  # Finder: show hidden files by default
  defaults write com.apple.finder AppleShowAllFiles -bool true

  # Finder: show all filename extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Finder: show status bar
  defaults write com.apple.finder ShowStatusBar -bool true

  # Finder: show path bar
  defaults write com.apple.finder ShowPathbar -bool true

  # Finder: allow text selection in Quick Look
  defaults write com.apple.finder QLEnableTextSelection -bool true

  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Show the ~/Library folder.
  chflags nohidden ~/Library

less_fancy_echo "Restarting affected apps, some of these changes require a logout/restart ..."
  for app in "cfprefsd" "Finder" "SystemUIServer"; do
    killall "${app}" > /dev/null 2>&1
  done

fancy_echo "Installing XCode ..."
  if [ ! $(xcode-select -p)='/Library/Developer/CommandLineTools' ]; then
    less_fancy_echo "${BRIGHT_RED}You must manually install Xcode${RESET}"
    less_fancy_echo 'try these commands'
    less_fancy_echo '$ sudo xcodebuild -license'
    less_fancy_echo '$ xcode-select --install'
    less_fancy_echo ''
    pause 'Press [Enter] key after Xcode has been installed'
  else
    less_fancy_echo '... skipping, looks like XCode is installed'
  fi

newly_installed_homebrew=0
if ! which brew &>/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
    newly_installed_homebrew=1
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "homebrew/cask-fonts"

brew "git"
brew "the_silver_searcher"
brew "ripgrep"
brew "vim"
brew "ctags"
brew "tmux"
brew "reattach-to-user-namespace"
brew "bash-completion"
brew "nginx"
brew "wget"
brew "chruby"
brew "ruby-install"
brew "rcm"
brew "yarn"
brew "golang"

cask "alfred"
cask "textmate"
cask "iterm2"
cask "font-source-code-pro"
EOF

git_clone() {
  if [ ! -d $2 ]; then
    git clone $1 $2
  else
    less_fancy_echo "... skip cloning $1, already cloned"
  fi

  true
}

start_if_needed iTerm

fancy_echo "Installing ShiftIt (onsi fork) ..."
  if [ ! -d /Applications/ShiftIt.app ]; then
    wget https://raw.github.com/onsi/ShiftIt/master/ShiftIt.zip
    unzip -q ShiftIt.zip
    rm ShiftIt.zip
    mv ShiftIt.app /Applications/
  fi

fancy_echo "Downloading Solarized ..."
  if [ ! -d ~/Applications/solarized ]; then
    wget https://ethanschoonover.com/solarized/files/solarized.zip
    unzip -q solarized.zip
    rm solarized.zip
    mv solarized ~/Applications/
  fi

fancy_echo "Installing Solarized Dark Theme for Terminal ..."
  if [ -s ~/Library/Preferences/com.apple.Terminal.plist ]; then
    if grep -q 'Solarized Dark' ~/Library/Preferences/com.apple.Terminal.plist; then
      echo "... skipping theme install, already installed"
    else
      open ~/Applications/solarized/osx-terminal.app-colors-solarized/Solarized\ Dark\ ansi.terminal
      sleep 1
      defaults write com.apple.terminal "Default Window Settings" -string "Solarized Dark ansi"
      defaults write com.apple.terminal "Startup Window Settings" -string "Solarized Dark ansi"
    fi
  else
    echo "... skipping theme install, Terminal not installed"
  fi

fancy_echo "Installing Solarized Dark Theme for iTerm ..."
  if [ -s ~/Library/Preferences/com.googlecode.iterm2.plist ]; then
    if grep -q 'Solarized Dark' ~/Library/Preferences/com.googlecode.iterm2.plist; then
      echo "... skipping theme install, already installed"
    else
      open ~/Applications/solarized/iterm2-colors-solarized/Solarized\ Dark.itermcolors
    fi
  else
    echo "... skipping theme install, iTerm 2 not installed"
  fi

fancy_echo "Installing chruby ..."
  source $(brew --prefix chruby)/share/chruby/chruby.sh
  source $(brew --prefix chruby)/share/chruby/auto.sh

find_latest_ruby() {
  chruby | tr -d '* ' | grep -x "ruby-.*" | sort -t. -k 1,1nr -k 2,2nr -k 3,3nr -k 4,4nr | head -1
}

fancy_echo "Install and use latest ruby ..."
  ruby-install --latest --no-reinstall ruby
  latest_ruby_version=$(find_latest_ruby)
  chruby ${latest_ruby_version}
  echo ${latest_ruby_version} > ~/.ruby-version

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Starting Menu Bar Apps ..."
  start_if_needed ShiftIt

fancy_echo "Creating workspace ..."
  mkdir -p ~/workspace
  mkdir -p ~/workspace/go

fancy_echo "Cloning Dotfiles ..."
  git_clone https://github.com/attack/dotfiles.git ~/workspace/dotfiles
  git_clone https://github.com/attack/vim-bootstrap.git ~/workspace/vim-bootstrap

fancy_echo "Symlinking Dotfiles ..."
  rcup -v -d ~/workspace/dotfiles -x README.md -x Brewfile -x install -x LICENSE -x tags
  rcup -v -d ~/workspace/vim-bootstrap -x README.md -x Brewfile -x install -x LICENSE -x tags

fancy_echo "Installing your shared additions from ~/.laptop.shared ..."
  if [[ -f ~/.laptop.shared ]]; then
    source ~/.laptop.shared
  fi

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi

if [ $newly_installed_homebrew -eq 1 ]; then
  fancy_echo "Updating shell config for Homebrew ..."
    if [[ -f ~/.zprofile ]]; then
      echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
    fi

    if [[ -f ~/.bash_profile ]]; then
      echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.bash_profile
    fi
fi


fancy_echo "Cleaning up Brew ..."
  brew cleanup

less_fancy_echo ""
less_fancy_echo " ${GREEN}******************"
less_fancy_echo "   TODO (manual)"
less_fancy_echo " ******************${RESET}"
less_fancy_echo ""
less_fancy_echo "   ${YELLOW}**** USING SYSTEM PREFERENCES${RESET}"
less_fancy_echo " - allow apps downloaded from Anywhere (see Security & Privacy > General)"
less_fancy_echo " - allow ShiftIt Accessibility access (see Security & Privacy > Privacy > Accessibility)"
less_fancy_echo " - map caps lock to ctrl (see Keyboard > Keyboard > Modifier Keys)"
less_fancy_echo ""
less_fancy_echo "   ${YELLOW}**** USING SPECIFIC APPS${RESET}"
less_fancy_echo " - use solarized for Terminal. Theme was installed, just make it default"
less_fancy_echo " - use solarized for iTerm2. Theme was installed, just apply it"
less_fancy_echo ""
